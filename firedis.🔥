from sys.info import sizeof
from runtime.llcl import Runtime
from algorithm import parallelize, num_cores
from os import getenv

from libc import AF_INET, AF_INET6, SOCK_STREAM, SOL_SOCKET, SO_REUSEADDR, SHUT_RDWR
from libc import c_char, c_int, c_uint, c_void
from libc import (
    accept,
    bind,
    c_charptr_to_string,
    htons,
    inet_ntoa,
    inet_ntop,
    inet_pton,
    listen,
    printf,
    recv,
    send,
    setsockopt,
    shutdown,
    sockaddr,
    sockaddr_in,
    socket,
    socklen_t,
    strlen,
    to_char_ptr,
)

alias FIREDIS_MAX_CLIENTS = 128
alias FIREDIS_CORE_MULTIPLIER = 1000
alias FIREDIS_PORT = 6379
alias FIREDIS_HOST = "0.0.0.0"


fn respond_to_message(msg: String) -> String:
    return "+PONG\r\n"


fn respond_to_client(new_sockfd: c_int) -> None:
    while True:
        let buf_size = 1024
        let buf = Pointer[c_char]().alloc(buf_size)
        let bytes_recv = recv(new_sockfd, buf, buf_size, 0)

        print("> bytes received:", bytes_recv)

        if bytes_recv == -1 or bytes_recv == 0:
            print("> failed to receive message")
            break

        let msg = c_charptr_to_string(buf, bytes_recv)
        print("> recived message:", msg)

        let reply = respond_to_message(msg)
        if send(new_sockfd, to_char_ptr(reply), len(reply), 0) == -1:
            print("> failed to send response:", reply)
            break

        print("> message sent succesfully")


fn wait_for_clients(sockfd: c_int, workers: Int) -> None:
    print("> waiting for connections...")

    while True:
        with Runtime() as rt:

            @always_inline
            @parameter
            fn handle_client(n: Int):
                let addr_ptr = Pointer[sockaddr].alloc(1)
                var sin_size = socklen_t(sizeof[socklen_t]())

                let new_sockfd = accept(
                    sockfd, addr_ptr, Pointer[socklen_t].address_of(sin_size)
                )

                if new_sockfd == -1:
                    print("> accept failed")
                    return
                else:
                    print("> new connection accepted with fd:", new_sockfd)

                respond_to_client(new_sockfd)

            parallelize[handle_client](rt, workers)


fn main() raises -> None:
    let ip_addr = getenv("HOST", FIREDIS_HOST)
    var port = atol(getenv("PORT", "0"))

    if port == 0:
        port = FIREDIS_PORT

    print("> starting firedis at ip addr:", ip_addr, "port:", port, "ðŸ”¥")

    let address_family = AF_INET
    var ip_buf_size = 4
    if address_family == AF_INET6:
        ip_buf_size = 16

    let ip_buf = Pointer[c_void].alloc(ip_buf_size)
    let conv_status = inet_pton(address_family, to_char_ptr(ip_addr), ip_buf)
    let raw_ip = ip_buf.bitcast[c_uint]().load()

    print("> inet_pton:", raw_ip, "status:", conv_status)

    let bin_port = htons(UInt16(port))

    print("> htons:", bin_port)

    var ai = sockaddr_in(address_family, bin_port, raw_ip, StaticTuple[8, c_char]())
    let ai_ptr = Pointer[sockaddr_in].address_of(ai).bitcast[sockaddr]()

    let sockfd = socket(address_family, SOCK_STREAM, 0)
    if sockfd == -1:
        print("> socket creation error")

    print("> sockfd:", sockfd)

    var yes: Int = 1
    if (
        setsockopt(
            sockfd,
            SOL_SOCKET,
            SO_REUSEADDR,
            Pointer[Int].address_of(yes).bitcast[c_void](),
            sizeof[Int](),
        )
        == -1
    ):
        print("> set socket options failed")

    if bind(sockfd, ai_ptr, sizeof[sockaddr_in]()) == -1:
        _ = shutdown(sockfd, SHUT_RDWR)
        print("> binding socket failed")

    if listen(sockfd, c_int(128)) == -1:
        print("> listen", sockfd, "failed")

    print("> started at:", ip_addr, "port:", port, "with fd:", sockfd)

    let multiplier = FIREDIS_CORE_MULTIPLIER
    var max_clients = atol(getenv("MAX_CLIENTS", "0"))
    if max_clients == 0:
        max_clients = FIREDIS_MAX_CLIENTS

    var workers = (num_cores() * multiplier)

    if workers > max_clients:
        workers = max_clients

    print(
        "> using",
        workers,
        "workers",
        "out of",
        max_clients,
        "max clients",
    )
    wait_for_clients(sockfd, workers)

    _ = shutdown(sockfd, SHUT_RDWR)
