from python.python import Python
from python.object import PythonObject
from runtime.llcl import num_cores, Runtime


fn parse(msg: PythonObject) -> String:
    try:
        let msg = msg.decode().split("\r\n")

        Python.add_to_path(".")
        let firedis_py = Python.import_module("firedis")

        if firedis_py.len_list(msg) <= 1:
            return ""

        return msg[-2].upper().to_string()
    except e:
        print("> [parse] err:", e.value)

        return ""


fn pong(socket: PythonObject) -> Bool:
    let pong = "+PONG\r\n"

    try:
        _ = socket.send(PythonObject(pong).encode("utf-8"))
    except e:
        print("> [pong] err:", e.value)

        return False

    return True


fn handle_msg(socket: PythonObject, raw_msg: PythonObject) -> Bool:
    let msg = parse(raw_msg)

    if msg == "COMMAND":
        return pong(socket)
    if msg == "PING":
        return pong(socket)

    return False


fn wait_forever(socket: PythonObject) -> None:
    while True:
        try:
            let data = socket.recv(1024)

            if handle_msg(socket, data):
                continue
            else:
                break
        except e:
            print("> [wait_forever] err:", e.value, "exiting...")


fn main():
    let host: StringRef = "localhost"
    let port: Int = 6379
    let reuse_port: Bool = True

    let socket: PythonObject
    let server_socket: PythonObject

    print("> [main] starting firedis on host:", host, "and port", port, "ðŸ”¥")

    try:
        Python.add_to_path(".")
        let firedis_py = Python.import_module("firedis")

        server_socket = firedis_py.create_server(host, port, reuse_port)

        let accept = server_socket.accept()

        let socket = accept[0]
        let addr = accept[1]

        print("> [main] client connected:", addr)

        wait_forever(socket)
    except e:
        print("> [main] err:", e.value, "exiting...")
