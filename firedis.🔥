from sys.info import sizeof

from libc import AF_INET, AF_INET6, SOCK_STREAM, SOL_SOCKET, SO_REUSEADDR, SHUT_RDWR
from libc import c_char, c_int, c_uint, c_void
from libc import (
    accept,
    bind,
    c_charptr_to_string,
    htons,
    inet_ntoa,
    inet_ntop,
    inet_pton,
    listen,
    printf,
    recv,
    send,
    setsockopt,
    shutdown,
    sockaddr,
    sockaddr_in,
    socket,
    socklen_t,
    strlen,
    to_char_ptr,
)


fn main():
    let ip_addr = "0.0.0.0"
    let port = 6379

    print("> starting firedis at ip addr:", ip_addr, ", port:", port, "ðŸ”¥")

    let address_family = AF_INET
    var ip_buf_size = 4
    if address_family == AF_INET6:
        ip_buf_size = 16

    let ip_buf = Pointer[c_void].alloc(ip_buf_size)
    let conv_status = inet_pton(address_family, to_char_ptr(ip_addr), ip_buf)
    let raw_ip = ip_buf.bitcast[c_uint]().load()

    print("> inet_pton:", raw_ip, "status:", conv_status)

    let bin_port = htons(UInt16(port))

    print("> htons:", bin_port)

    var ai = sockaddr_in(address_family, bin_port, raw_ip, StaticTuple[8, c_char]())
    let ai_ptr = Pointer[sockaddr_in].address_of(ai).bitcast[sockaddr]()

    let sockfd = socket(address_family, SOCK_STREAM, 0)
    if sockfd == -1:
        print("> socket creation error")

    print("> sockfd:", sockfd)

    var yes: Int = 1
    if (
        setsockopt(
            sockfd,
            SOL_SOCKET,
            SO_REUSEADDR,
            Pointer[Int].address_of(yes).bitcast[c_void](),
            sizeof[Int](),
        )
        == -1
    ):
        print("> set socket options failed")

    if bind(sockfd, ai_ptr, sizeof[sockaddr_in]()) == -1:
        _ = shutdown(sockfd, SHUT_RDWR)
        print("> Binding socket failed")

    if listen(sockfd, c_int(128)) == -1:
        print("> listen", sockfd, "failed")

    print("> server: started at:", ip_addr, ":", port, "with fd:", sockfd)

    while True:
        let addr_ptr = Pointer[sockaddr].alloc(1)
        var sin_size = socklen_t(sizeof[socklen_t]())
        let new_sockfd = accept(
            sockfd, addr_ptr, Pointer[socklen_t].address_of(sin_size)
        )

        if new_sockfd == -1:
            print("> accept failed")
            _ = shutdown(sockfd, SHUT_RDWR)

        # TODO: we need to figure out how to show the address
        #
        # print(
        #     "> got connection from:",
        #     c_charptr_to_string(
        #         inet_ntoa(addr_ptr.bitcast[sockaddr_in]().load().sin_addr.s_addr)
        #     ),
        # )

        # TODO: fix this code, we need to get the ip address from the sockaddr_in
        #
        # let _sockaddr = addr_ptr.bitcast[sockaddr_in]().load()
        # var sin_addr = _sockaddr.sin_addr.s_addr
        # let sin_addr_ptr = Pointer[UInt32].address_of(sin_addr)
        #
        # let client_addr = inet_ntop(
        #     address_family,
        #     sin_addr_ptr,
        #     ip_buf,
        #     ip_buf_size,
        # )
        # let src = to_char_ptr("0.0.0.0.0")
        # var dst = Pointer[c_char].alloc(14)
        # let res = inet_ntop(address_family, src, dst, strlen(dst))
        # print("> server: got connection from", c_charptr_to_string(client_addr))

        let msg = "+OK\r\n"
        if send(new_sockfd, to_char_ptr(msg).bitcast[c_void](), len(msg), 0) == -1:
            print("> failed to send response")
            break

        print("> message sent succesfully")

        # this should happen in a different thread
        while True:
            let buf_size = 1024
            let buf = Pointer[UInt8]().alloc(buf_size)
            let bytes_recv = recv(new_sockfd, buf, buf_size, 0)

            print("> bytes received:", bytes_recv)

            if bytes_recv == -1 or bytes_recv == 0:
                _ = shutdown(new_sockfd, SHUT_RDWR)
                print("> failed to receive message\n")
                break

            print_no_newline("> recived message: ")
            print(c_charptr_to_string(buf, bytes_recv))

    _ = shutdown(sockfd, SHUT_RDWR)
